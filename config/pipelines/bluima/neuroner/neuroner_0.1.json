{
  "name" : "neuroner",
  "version" : "0.1",
  "description" : "named entity recognizer for neuronal cells, based on UIMA Ruta rules",
  "domain" : "bluima/neuroner",
  "script" : [
 "PACKAGE neuroner;"
, ""
, "RETAINTYPE(BREAK, SPACE); // BREAK so that two neurons on two different lines do not collide"
, "// SPACE needed to match lexical resources"
, ""
, "DECLARE Annotation NeuronProperty(STRING name, STRING ontologyId); // base class for properties "
, ""
, "DECLARE NeuronTrigger;  // acts as a trigger"
, "MARKFAST(NeuronTrigger, '$neuroner/resources/bluima/neuroner/neuron_triggers.txt', true, 3);"
, ""
, "// DEVELOPMENTAL STAGES"
, "DECLARE NeuronProperty Developmental; "
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_developmental_ontology.obo\", Developmental, \"ontologyId\");"
, ""
, "// NEUROTRANSMITTER"
, "DECLARE NeuronProperty NeurotransmitterProp(STRING name, STRING ontologyId);"
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_neurotransmitter_ontology.obo\", NeurotransmitterProp, \"ontologyId\");"
, ""
, "// LAYER"
, "DECLARE NeuronProperty Layer;"
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_layer_ontology.robo\", Layer, \"ontologyId\");"
, ""
, "// MORPHOLOGY"
, "DECLARE NeuronProperty Morphology;"
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_morphology_ontology.obo\", Morphology, \"ontologyId\");"
, ""
, "// SPECIES"
, "WORDTABLE speciesWt = '$neuroner/resources/bluima/neuroner/ncbi_species_top1000.csv';"
, "DECLARE NeuronProperty Species;"
, "MARKTABLE(Species, 1, speciesWt, true, 2, \"\", 0, \"ontologyId\" = 2);"
, ""
, "// ORIENTATION"
, "DECLARE NeuronProperty Orientation;"
, "\"(?i)inverted|horizontal|descending|upper|lower\" -> Orientation;"
, ""
, "// SIZE"
, "DECLARE NeuronProperty Size;"
, "\"(?i)large|medium|small|narrow|giant\" -> Size;"
, ""
, "// ELECTROPHYSIOLOGY"
, "DECLARE Annotation EphysTrigger(STRING name, STRING ontologyId);"
, "DECLARE Annotation EphysProp(STRING name, STRING ontologyId);"
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_electrophysiology-triggers_ontology.robo\", EphysTrigger, \"ontologyId\");"
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_electrophysiology_ontology.robo\", EphysProp, \"ontologyId\");"
, ""
, "// FUNCTIONS"
, "DECLARE NeuronProperty Function;"
, "MARKFAST(Function, '$neuroner/resources/bluima/neuroner/functions.txt', true, 4, false);"
, ""
, "// BRAIN REGION"
, "DECLARE NeuronProperty BrainRegionProp; // so as not to be confused w/ other BrainRegion annotations"
, "ONTO(\"$neuroner/resources/bluima/neuroner/regions.obo\", BrainRegionProp, \"ontologyId\");"
, "ONTO(\"$neuroner/resources/bluima/neuroner/hbp_brainregions_aba-syn.obo\", BrainRegionProp, \"ontologyId\");"
, "// TODO keep in prio the ones with an id"
, "//(BrainRegionProp{-> UNMARK(BrainRegionProp)}){AND(FEATURE(\"ontologyId\", \"NO_ID\"), PARTOFNEQ(BrainRegionProp))};"
, ""
, "// PROTEIN"
, "DECLARE NeuronProperty ProteinProp; "
, "ONTO(\"$neuroner/resources/bluima/neuroner/GeneNames.obo\", ProteinProp, \"ontologyId\");"
, ""
, "REMOVERETAINTYPE(SPACE); // SPACE not needed anymore in aggregations"
, ""
, "//"
, "// AGGREGATE PROPERTIES ////////////////////////////////////////////////////////////////////////////////////"
, ""
, "DECLARE NeuronProperty Electrophysiology;"
, "(EphysTrigger|EphysProp|\"-\")+ {-> MARK(Electrophysiology)};"
, "Electrophysiology{(Electrophysiology.end - Electrophysiology.begin) < 2 -> UNMARK(Electrophysiology)}; // remove single hyphens"
, ""
, "DECLARE ProteinTrigger;"
, "\"(?i)(contain|secret|releas|bind|synthesiz|express|contain)ing|\\\\+|principal|immuno(nega|posi|reac)tive|(reac|posi)tive|immunoreactivity|"
, "reactive|labeled|stained|[Cc]re\" -> ProteinTrigger;"
, "// aggregate protein names (as it was matched above) with a ProteinTrigger "
, "ProteinProp {-> SHIFT(ProteinProp,1,4)} \"-\"? ProteinTrigger? ProteinTrigger?;"
, "ProteinTrigger \"-\"? ProteinTrigger? \"-\"? ProteinProp {-> SHIFT(ProteinProp,1,5)};"
, "(ProteinProp (COMMA | \"and\" | (COMMA \"and\") | (COMMA \"or\"))){-> SHIFT(ProteinProp,1,2)} ProteinProp;"
, ""
, "(NeurotransmitterProp \"-\"? ProteinTrigger){-> SHIFT(NeurotransmitterProp,1,3)}; // also apply protein rules to neurotransmitters"
, ""
, "(NeuronProperty{-> UNMARK(NeuronProperty)}){PARTOFNEQ(NeuronProperty)}; // only keep longest property"
, ""
, "//"
, "// AGGREGATE NEURONS ////////////////////////////////////////////////////////////////////////////////////"
, ""
, "// aggregate multiple triggers together"
, "(NeuronTrigger \"and\"? NeuronTrigger){-> SHIFT(NeuronTrigger)};"
, ""
, "DECLARE Neuron;                // matches the whole span of a neuron definition"
, "DECLARE PreNeuron, PostNeuron; // context before and after a neuron trigger"
, ""
, "// gather NeuronProperty occurring before and after Neuron into Pre and PostNeuron"
, "NeuronProperty+{-> MARK(PreNeuron, 1, 1)} NeuronTrigger;"
, "(NeuronProperty+ (\"-\" | COMMA | \"and\" | (COMMA \"and\") | (COMMA \"or\")))* {-> MARK(PreNeuron, 1, 2)} NeuronProperty+ NeuronTrigger;"
, "((\"and\" | \"in\" | \"of\" | \"with\") \"the\"? NeuronProperty+)+ {-> MARK(PostNeuron)};"
, "NeuronTrigger NeuronProperty+ {-> MARK(PostNeuron, 2, 2)};"
, ""
, "// aggregate Pre and PostNeurons into Neuron, remove them"
, "PreNeuron NeuronTrigger PostNeuron {-> MARK(Neuron, 1, 3)};"
, "NeuronTrigger PostNeuron {-> MARK(Neuron, 1, 2)};"
, "PreNeuron NeuronTrigger {-> MARK(Neuron, 1, 2)};"
, "//PreNeuron{-> DEL};"
, "//PostNeuron{-> DEL};"
, ""
, "NeuronTrigger{NOT(REGEXP(\"[Cc]ells?\")) -> MARK(Neuron, 1, 1)}; // remove single isolated Neuron, unless \"cell\""
, ""
, "Neuron{CONTAINS(BREAK) -> DEL}; // remove neuron that have line breaks "
, "// TODO check above with pdf (new lines?)"
, ""
, "(Neuron{-> UNMARK(Neuron)}){PARTOFNEQ(Neuron)}; // only keep longest Neuron"
, ""
, "// TODO remove cells without NeuronProperty"
, ""
, ""
, "//"
, "// MISSING ///////////////////////////////////////////////////////////////////////////////////////////////"
, "// Find up to 3 unmatched words preceding a Neuron to see what is still missing"
, "DECLARE Missing, InBetweenMissing;"
, "NeuronProperty (ANY{-PARTOF(NeuronProperty)})                                                           {-> MARK(Missing, 2, 2)} (Neuron|NeuronTrigger);"
, "NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)})                              {-> MARK(Missing, 2, 2)} (Neuron|NeuronTrigger);"
, "NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)} (Neuron|NeuronTrigger);"
, "NeuronTrigger  (ANY{-PARTOF(NeuronProperty)})                                                           {-> MARK(Missing, 2, 2)} PostNeuron;"
, "Neuron         (ANY{-PARTOF(NeuronProperty)})                                                           {-> MARK(Missing, 2, 2)} PostNeuron;"
, "NeuronTrigger  (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)})                              {-> MARK(Missing, 2, 2)} PostNeuron;"
, "Neuron         (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)})                              {-> MARK(Missing, 2, 2)} PostNeuron;"
, "NeuronTrigger  (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)} PostNeuron;"
, "Neuron         (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)} PostNeuron;"
, ""
, "//TODO Missing{IF((end-begin) < 2)->DEL};"
 ],
  "config" : {
    "neuroner" : {
      "type" : "git",
      "url" : "https://github.com/renaud/neuroNER.git",
      "ref" : "master",
      "mode" : "ruta"
    }
  },
  "output" : {
    "include_annotations" : [ "neuroner.*" ]
  },
  "tests" : [ {
    "input" : "layer V and layer iii large pyramidal neurons in Layer 3/4 and Layer 5B",
    "expected" : {
      "Layer" : [ {
        "begin" : 0,
        "end" : 7,
        "properties" : {
          "ontologyId" : "HBP_LAYER:0000005"
        }
      }, {
        "begin" : 12,
        "end" : 21,
        "properties" : {
          "ontologyId" : "HBP_LAYER:0000003"
        }
      }, {
        "begin" : 49,
        "end" : 58,
        "properties" : {
          "ontologyId" : "HBP_LAYER:0000121"
        }
      }, {
        "begin" : 63,
        "end" : 71,
        "properties" : {
          "ontologyId" : "HBP_LAYER:0000051"
        }
      } ],
      "Size" : [ {
        "begin" : 22,
        "end" : 27
      } ],
      "Morphology" : [ {
        "begin" : 28,
        "end" : 37,
        "properties" : {
          "ontologyId" : "HBP_MORPHOLOGY:0000001"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 71
      } ]
    }
  }, {
    "input" : "slowly adapting stretch receptor neuron",
    "expected" : {
      "Function" : [ {
        "begin" : 0,
        "end" : 23
      }, {
        "begin" : 24,
        "end" : 32
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 39
      } ]
    }
  }, {
    "input" : "parvalbumin basket cell",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 11,
        "properties" : {
          "ontologyId" : "NCBI_GENE:19293"
        }
      } ],
      "Morphology" : [ {
        "begin" : 12,
        "end" : 18,
        "properties" : {
          "ontologyId" : "HBP_MORPHOLOGY:0000019"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 23
      } ]
    }
  }, {
    "input" : "Parvalbumin-expressing neurons",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 22,
        "properties" : {
          "ontologyId" : "NCBI_GENE:19293"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 30
      } ]
    }
  }, {
    "input" : "neuron expressing parvalbumin",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 7,
        "end" : 29,
        "properties" : {
          "ontologyId" : "NCBI_GENE:19293"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 29
      } ]
    }
  }, {
    "input" : "parvalbumin neuron",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 11,
        "properties" : {
          "ontologyId" : "NCBI_GENE:19293"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 18
      } ]
    }
  }, {
    "input" : "slow nonadapting spiking cell",
    "expected" : {
      "EphysProp" : [ {
        "begin" : 0,
        "end" : 4,
        "properties" : {
          "ontologyId" : "HBP_EPHYS:0000100"
        }
      } ],
      "EphysTrigger" : [ {
        "begin" : 5,
        "end" : 16,
        "properties" : {
          "ontologyId" : "HBP_EPHYS_TRIGGER:0000009"
        }
      }, {
        "begin" : 17,
        "end" : 24,
        "properties" : {
          "ontologyId" : "HBP_EPHYS_TRIGGER:0000003"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 29
      } ]
    }
  }, {
    "input" : "a cell irregularly bursting bbbb",
    "expected" : {
      "EphysTrigger" : [ {
        "begin" : 19,
        "end" : 27
      } ],
      "Electrophysiology" : [ {
        "begin" : 7,
        "end" : 27
      } ],
      "EphysProp" : [ {
        "begin" : 7,
        "end" : 18
      } ],
      "Neuron" : [ {
        "begin" : 2,
        "end" : 27
      } ]
    }
  }, {
    "input" : "cells in the reticular nucleus of the thalamus",
    "expected" : {
      "BrainRegionProp" : [ {
        "begin" : 13,
        "end" : 46,
        "properties" : {
          "ontologyId" : "ABA_REGION:262"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 46
      } ]
    }
  }, {
    "input" : "SAPAP1-Cre expressing cells",
    "expected" : {
      "Neuron" : [ {
        "begin" : 0,
        "end" : 27
      } ],
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 21,
        "properties" : {
          "ontologyId" : "NCBI_GENE:224997"
        }
      } ]
    }
  }, {
    "input" : "PV-cre cell",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 6,
        "properties" : {
          "ontologyId" : "NCBI_GENE:19293"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 11
      } ]
    }
  }, {
    "comment" : "EphysProps and EphysTriggers should be combined into a neuroNER if they are conjoined by a hyphen",
    "input" : "fast-spiking basket cell",
    "expected" : {
      "Morphology" : [ {
        "begin" : 13,
        "end" : 19,
        "properties" : {
          "ontologyId" : "HBP_MORPHOLOGY:0000019"
        }
      } ],
      "EphysTrigger" : [ {
        "begin" : 5,
        "end" : 12,
        "properties" : {
          "ontologyId" : "HBP_EPHYS_TRIGGER:0000003"
        }
      } ],
      "Electrophysiology" : [ {
        "begin" : 0,
        "end" : 12
      } ],
      "EphysProp" : [ {
        "begin" : 0,
        "end" : 4,
        "properties" : {
          "ontologyId" : "HBP_EPHYS:0000080"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 24
      } ]
    }
  }, {
    "comment" : "Example where someone uses [protein], [protein], [protein] [protein trigger] [neuron trigger]. TODO: protein matching still does not work",
    "input" : "many calretinin-, neuronal nitric oxide synthase-, and reelin-expressing cells TODO",
    "expected" : {
      "ProteinTrigger" : [ {
        "begin" : 62,
        "end" : 72
      } ],
      "Neuron" : [ {
        "begin" : 18,
        "end" : 78
      } ]
    }
  }, {
    "comment" : "",
    "input" : "Grin2a-expressing neuron space NMDAR2A-expressing neuron space GluN2A-expressing neuron",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 17,
        "properties" : {
          "ontologyId" : "NCBI_GENE:14811"
        }
      }, {
        "begin" : 31,
        "end" : 49,
        "properties" : {
          "ontologyId" : "NCBI_GENE:14811"
        }
      }, {
        "begin" : 63,
        "end" : 80,
        "properties" : {
          "ontologyId" : "NCBI_GENE:14811"
        }
      } ],
      "Neuron" : [ {
        "begin" : 0,
        "end" : 24
      }, {
        "begin" : 31,
        "end" : 56
      }, {
        "begin" : 63,
        "end" : 87
      } ]
    }
  }, {
    "comment" : "#5",
    "input" : "gad aaaa GAD bbbb GAD2",
    "expected" : {
      "ProteinProp" : [ {
        "begin" : 0,
        "end" : 3,
        "properties" : {
          "ontologyId" : "NCBI_GENE:22223"
        }
      }, {
        "begin" : 9,
        "end" : 12,
        "properties" : {
          "ontologyId" : "NCBI_GENE:22223"
        }
      }, {
        "begin" : 18,
        "end" : 22,
        "properties" : {
          "ontologyId" : "NCBI_GENE:14417"
        }
      } ]
    }
  }, {
    "comment" : "#31 adding flat lists of region terms back",
    "input" : "nucleus pulvinaris medialis internus bbbb sixth cranial nerve",
    "expected" : {
      "BrainRegionProp" : [ {
        "begin" : 0,
        "end" : 36,
        "properties" : {
          "ontologyId" : "UNKN_REGION:339"
        }
      }, {
        "begin" : 42,
        "end" : 61,
        "properties" : {
          "ontologyId" : "ABA_REGION:710"
        }
      } ]
    }
  } ]
}