{
  "name" : "neuroner",
  "version" : "0.1",
  "description" : "named entity recognizer for neuronal cells, based on UIMA Ruta rules",
  "domain" : "bluima/neuroner",
  "script" : [ "PACKAGE neuroner;", "", "DECLARE Neuron, NeuronProperty; // acts as a trigger", "DECLARE NeuronProperty Function;", "DECLARE NeuronProperty Morphology;", "DECLARE NeuronProperty BrainRegionProp; // so as not to be confused w/ other BrainRegion", "DECLARE ProteinName; // is further aggregated below", "", "", "// DEVELOPMENTAL STAGES", "WORDTABLE developmentalWt  = 'bluima/neuroner/hbp_developmental_ontology.csv';", "DECLARE NeuronProperty Developmental(STRING name, STRING ontologyId); ", "Document{-> MARKTABLE(Developmental, 1, developmentalWt, true, 2, \"\", 2, \"ontologyId\" = 2)};", "", "// NEUROTRANSMITTER", "WORDTABLE neurotransmitterWt = 'bluima/neuroner/hbp_neurotransmitter_ontology.csv';", "DECLARE NeuronProperty NeurotransmitterProp(STRING name, STRING ontologyId);", "Document{-> MARKTABLE(NeurotransmitterProp, 1, neurotransmitterWt, true, 2, \"\", 2, \"ontologyId\" = 2)};", "", "// LAYER", "//\"[Ll]ayers? ([1-6][AaBb]?([/-][1-6][AaBb]?)?|[iIvV]+([/-][iIvV]+)?)\" -> Layer;", "WORDTABLE layerWt = 'bluima/neuroner/hbp_layer_ontology.csv';", "DECLARE NeuronProperty Layer(STRING name, STRING ontologyId);", "Document{-> MARKTABLE(Layer, 1, layerWt, true, 2, \"\", 2, \"ontologyId\" = 2)};", "", "// SPECIES", "WORDTABLE speciesWt = 'bluima/neuroner/ncbi_species_top1000.csv';", "DECLARE NeuronProperty Species(STRING name, STRING ontologyId);", "Document{-> MARKTABLE(Species, 1, speciesWt, true, 2, \"\", 2, \"ontologyId\" = 2)};", "", "", "", "// ORIENTATION", "DECLARE NeuronProperty Orientation;", "\"(?i)inverted|horizontal|descending\" -> Orientation;", "", "// SIZE", "DECLARE NeuronProperty Size;", "\"(?i)large|medium|small|narrow|giant\" -> Size;", "", "// ELECTROPYHSIOLOGY", "DECLARE NeuronProperty Electrophysiology;", "\"(?i)((continu(ally|ous)?|delayed) )?((regular|fast|late|burst(ing)?|classical|delayed)[ -])?((non[- ]+)?accomm?odating|spiking|firing|irregular|stuttering)\" -> Electrophysiology;", "", "", "// DICTIONARY MATCHING", "// we use a single compiled trie to match word lists (found in resources folder)", "WORDLIST generated = 'bluima/neuroner/generated.mtwl';", "Document{->TRIE(", "\"neuron_triggers.txt\" = Neuron,", "\"functions.txt\" = Function,", "\"morphology.txt\" = Morphology,", "\"proteins_ns_dan.txt\" = ProteinName,", "\"proteins_obo_pro.txt\" = ProteinName,", "\"regions_adverbs_al.txt\" = BrainRegionProp,", "\"regions_adverbs_ic.txt\" = BrainRegionProp,", "\"regions_lfrench.txt\" = BrainRegionProp,", "\"regions.txt\" = BrainRegionProp,", "generated, true, 4, false, 0, \"\")}; // case ignored if word length > 4; edit distance deactivated", "", "", "// PROTEIN", "// aggregate protein names (as it was matched above) with a trigger ", "DECLARE ProteinTrigger;", "\"(?i)expressing|principal|containing|immuno(nega|posi|reac)tive|positive\" -> ProteinTrigger;", "DECLARE NeuronProperty ProteinProp;", "(ProteinName){-> MARK(ProteinProp, 1, 2)} (\"-\"? ProteinTrigger);", "//TODO (ProteinTrigger){-> MARK(ProteinProp, 1, 2)} (\"-\"? ProteinName);", "", "", "//////////////////////////////////////////////////////////", "", "DECLARE NeuronWithProperties;", "// gather NeuronProperty occurring before Neuron", "NeuronProperty+{-> MARK(NeuronWithProperties, 1, 2)} Neuron;", "// single Neuron (pruned below), but not \"cell\"", "Neuron{NOT(REGEXP(\"[Cc]ells?\")) -> MARK(NeuronWithProperties, 1, 1)}; ", "(NeuronProperty+ (COMMA | \"and\" | (COMMA \"and\")))* {-> MARK(NeuronWithProperties, 1, 3)} NeuronProperty+ Neuron;", "// keep only longest NeuronWithProperties", "NeuronWithProperties{PARTOFNEQ(NeuronWithProperties) -> DEL};", "// TODO remove cells without NeuronProperty", "", "// Find up to 3 unmatched words preceding a NeuronWithProperties to see what is still missing", "// DECLARE Sentence; PERIOD #{-> MARK(Sentence)} PERIOD;", "DECLARE Missing, InBetweenMissing;", "NeuronProperty (ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)}(NeuronWithProperties|Neuron);", "NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)}(NeuronWithProperties|Neuron);", "NeuronProperty (ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)} ANY{-PARTOF(NeuronProperty)}) {-> MARK(Missing, 2, 2)}(NeuronWithProperties|Neuron);", "" ],
  "output" : {
    "filter_annotations" : [ ],
    "include_annotations" : [ "neuroner.*" ],
    "payloads" : [ ]
  },
  "tests" : [ {
    "in" : "layer V and layer iii large pyramidal neurons",
    "out" : {
      "1": {"@type" : "Layer",  "end" : 7,  "ontologyId" : "HBP_NEUROTRANSMITTER:0000005" },
      "2": {"@type" : "Layer",  "begin" : 12,  "end" : 21,  "ontologyId" : "HBP_NEUROTRANSMITTER:0000003" },
      "3": {"@type" : "Size",  "begin" : 22,  "end" : 27 },
      "4": {"@type" : "Neuron",  "begin" : 38,  "end" : 45 },
      "5": {"@type" : "Morphology",  "begin" : 28,  "end" : 37 },
      "6": {"@type" : "BrainRegionProp",  "end" : 7 },
      "7": {"@type" : "BrainRegionProp",  "begin" : 12,  "end" : 21 }
    }
  }, {
    "in" : "slowly adapting stretch receptor neuron",
    "out" : {
      "1": {"@type" : "Function",  "end" : 23 },
      "2": {"@type" : "Function",  "begin" : 24,  "end" : 32 },
      "3": {"@type" : "Neuron",  "begin" : 33,  "end" : 39 }
    }
  } ]
}
